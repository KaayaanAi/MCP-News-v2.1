# MCP-News-v2.1 - Production Docker Compose
# Production-ready MCP Server with dual protocol support

version: '3.8'

services:
  mcp-news:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mcp-news-v2.1
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-4009}:4009"
    environment:
      # Core Configuration
      - NODE_ENV=production
      - HTTP_PORT=4009
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - PRETTY_LOGS=false

      # Security
      - API_KEY=${API_KEY:-}
      - CORS_ORIGINS=${CORS_ORIGINS:-*}

      # AI Integration
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-4}
      - OPENAI_MAX_COMPLETION_TOKENS=${OPENAI_MAX_COMPLETION_TOKENS:-1000}
      - OPENAI_TEMPERATURE=${OPENAI_TEMPERATURE:-0.1}

      # Caching
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - CACHE_TTL_SECONDS=${CACHE_TTL_SECONDS:-300}
      - ENABLE_CACHE=${ENABLE_CACHE:-true}

      # News APIs
      - NEWS_API_KEY=${NEWS_API_KEY:-}
      - CRYPTO_PANIC_API_KEY=${CRYPTO_PANIC_API_KEY:-}
      - MOCK_EXTERNAL_APIS=${MOCK_EXTERNAL_APIS:-false}

    volumes:
      - ./logs:/app/logs:rw

    healthcheck:
      test: ["CMD", "node", "/app/healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    labels:
      - "kaayaan.service=mcp-news-v2.1"
      - "kaayaan.version=2.1.1"
      - "kaayaan.component=mcp-server"
      - "kaayaan.protocol=stdio,http"

    depends_on:
      redis:
        condition: service_healthy

    # Resource limits for production
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

    networks:
      - mcp-network

  # Redis service for caching
  redis:
    image: redis:7-alpine
    container_name: mcp-redis
    restart: unless-stopped
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    networks:
      - mcp-network

# Named volumes
volumes:
  redis_data:
    driver: local

# Networks
networks:
  mcp-network:
    driver: bridge