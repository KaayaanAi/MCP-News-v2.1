# MCP News v2.1 - Production Docker Compose
# TypeScript Node.js MCP Server with Redis and enhanced monitoring

version: '3.8'

services:
  mcp-news-v2.1:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mcp-news-v2.1
    restart: unless-stopped
    stdin_open: true
    tty: true
    networks:
      - kaayaan_default
    environment:
      # Node.js Configuration
      - NODE_ENV=production
      - PORT=${PORT:-4009}

      # MCP Configuration
      - MCP_SERVER_NAME=mcp-news-v2.1
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - TZ=Asia/Kuwait

      # Cache Configuration
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - CACHE_TTL=${CACHE_TTL:-300}

      # AI/LLM Configuration
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-4o-mini}

      # Rate Limiting
      - RATE_LIMIT_WINDOW=${RATE_LIMIT_WINDOW:-60000}
      - RATE_LIMIT_MAX=${RATE_LIMIT_MAX:-100}

      # Security
      - API_KEY=${API_KEY}

    volumes:
      - ./logs:/app/logs:rw

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4009/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    labels:
      - "traefik.enable=false"  # No HTTP exposure needed for MCP stdio
      - "kaayaan.service=mcp-news-v2.1"
      - "kaayaan.version=2.1"
      - "kaayaan.component=ai-analysis"

    depends_on:
      redis:
        condition: service_healthy
    
    # Resource limits for production
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Redis service for caching
  redis:
    image: redis:7-alpine
    container_name: mcp-redis
    restart: unless-stopped
    networks:
      - kaayaan_default
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

# Named volumes
volumes:
  redis_data:
    driver: local

# External networks (must exist in Kaayaan stack)
networks:
  kaayaan_default:
    external: true